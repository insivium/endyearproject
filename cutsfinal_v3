% Define the fuzzy parameters
S1 = [32, 33, 34];
r = [0.048, 0.05, 0.052];
sigma = [0.08, 0.1, 0.12];

% Calculate the alpha-cuts
alpha_values = 0.9:0.01:0.99;
num_params = 3; % number of fuzzy parameters
alpha_cuts = zeros(length(alpha_values), 2, num_params);

for param_idx = 1:num_params
    switch param_idx
        case 1
            S = S1;
            param_name = 'Stock price';
        case 2
            S = r;
            param_name = 'Risk-free rate';
        case 3
            S = sigma;
            param_name = 'Volatility';
    end
    fprintf('Alpha-cuts of the fuzzy parameters:\n');
    fprintf('%s:\n', param_name);
    for i = 1:length(alpha_values)
        alpha = alpha_values(i);
        cuts_lower = S(1) + alpha * (S(2) - S(1));
        cuts_upper = S(3) - (S(3) - S(2)) * alpha;
        alpha_cuts(i, 1, param_idx) = cuts_lower;
        alpha_cuts(i, 2, param_idx) = cuts_upper;
        fprintf(' %.4f %.4f\n', cuts_lower, cuts_upper);
    end
    fprintf('\n');
end

K = 30;
T = 0.25;
call_prices = zeros(length(alpha_values), 3); % Updated to include alpha values

for i = 1:length(alpha_values)
    % Calculate the lower bound of the call price
    S = alpha_cuts(i, 1, 1);
    r_value = alpha_cuts(i, 1, 2);
    sigma_value = alpha_cuts(i, 1, 3);
    d1 = (log(S / K) + (r_value + sigma_value^2 / 2) * T) / (sigma_value * sqrt(T));
    d2 = d1 - sigma_value * sqrt(T);
    call_prices(i, 1) = alpha_values(i); % Store alpha value
    call_prices(i, 2) = S * normcdf(d1) - K * exp(-r_value * T) * normcdf(d2); % Lower bound

    % Calculate the upper bound of the call price
    S = alpha_cuts(i, 2, 1);
    r_value = alpha_cuts(i, 2, 2);
    sigma_value = alpha_cuts(i, 2, 3);
    d1 = (log(S / K) + (r_value + sigma_value^2 / 2) * T) / (sigma_value * sqrt(T));
    d2 = d1 - sigma_value * sqrt(T);
    call_prices(i, 3) = S * normcdf(d1) - K * exp(-r_value * T) * normcdf(d2); % Upper bound
end

% Display the alpha values and call prices
fprintf('Alpha values and fuzzified lower bound and upper bound call prices:\n');
disp(call_prices);




% Belief degree finder
% Given call price
c = 3.33;

% Tolerance
tolerance = 1e-6;

% Initial value of alpha
alpha = alpha_values(1); % Start with the first alpha value

% Initial values for binary search
low = 0;
up = 1;

% Step 1: Find the interval where c lies
interval_idx = [];
for i = 1:size(call_prices, 1)
    if c >= call_prices(i, 2) && c <= call_prices(i, 3)
        interval_idx = i;
        break;
    end
end

if isempty(interval_idx)
    error('No interval found containing the given call price.');
end

% Step 2: Find the closest value to c within the interval
interval = call_prices(interval_idx, 2:3);
[~, closest_idx] = min(abs(interval - c));
nu = interval(closest_idx);

% Step 3: Bisection method to refine nu
while abs(c - nu) > tolerance
    if nu > c
        up = alpha;
    else
        low = alpha;
    end
    alpha = (low + up) / 2;
    
    % Update nu based on the new alpha value
    % Reevaluate the interval and find the closest value to c within it
    interval = call_prices(interval_idx, 2:3);
    [~, closest_idx] = min(abs(interval - c));
    nu = interval(closest_idx);
end

% Output alpha
fprintf('Root found: alpha = %.6f\n', alpha);

