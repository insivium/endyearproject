% Define the fuzzy parameters
S1 = [32, 33, 34];
r = [0.048, 0.05, 0.052];
sigma = [0.08, 0.1, 0.12];

% Calculate the alpha-cuts
alpha_values = 0.8:0.01:0.99;
num_params = 3; % number of fuzzy parameters
alpha_cuts = zeros(length(alpha_values), 2, num_params);

for param_idx = 1:num_params
    switch param_idx
        case 1
            S = S1;
            param_name = 'Stock price';
        case 2
            S = r;
            param_name = 'Risk-free rate';
        case 3
            S = sigma;
            param_name = 'Volatility';
    end
    fprintf('Alpha-cuts of the fuzzy parameters:\n');
    fprintf('%s:\n', param_name);
    for i = 1:length(alpha_values)
        alpha = alpha_values(i);
        cuts_lower = S(1) + alpha * (S(2) - S(1));
        cuts_upper = S(3) - (S(3) - S(2)) * alpha;
        alpha_cuts(i, 1, param_idx) = cuts_lower;
        alpha_cuts(i, 2, param_idx) = cuts_upper;
        %fprintf(' %.4f %.4f\n', cuts_lower, cuts_upper);
    end
    %fprintf('\n');
end

K = 40;
T = 0.25;
put_prices = zeros(length(alpha_values), 3); % Updated to include alpha values

for i = 1:length(alpha_values)
    % Calculate the lower bound of the put price
    % Take U.B of S and r for L.B of put
    S = alpha_cuts(i, 2, 1);
    r_value = alpha_cuts(i, 2, 2);
    sigma_value = alpha_cuts(i, 1, 3);
    d1 = (log(S / K) + (r_value + sigma_value^2 / 2) * T) / (sigma_value * sqrt(T));
    d2 = d1 - sigma_value * sqrt(T);
    put_prices(i, 1) = alpha_values(i); % Store alpha value
    put_prices(i, 2) =K * exp(-r_value * T) * normcdf(-d2) - S * normcdf(-d1); % Lower bound

    % Calculate the upper bound of the put price
    % Take L>B of S and r for U.B of put
    S = alpha_cuts(i, 1, 1);
    r_value = alpha_cuts(i, 1, 2);
    sigma_value = alpha_cuts(i, 2, 3);
    d1 = (log(S / K) + (r_value + sigma_value^2 / 2) * T) / (sigma_value * sqrt(T));
    d2 = d1 - sigma_value * sqrt(T);
    put_prices(i, 3) = K * exp(-r_value * T) * normcdf(-d2) - S * normcdf(-d1); % Upper bound
end

% Given put price
p = 6.4881;
% Tolerance
% Initialize minimum residual and interval index
min_residual = Inf; % Initialize to positive infinity
interval_idx = [];

% Step 1: Find the interval where p lies
for i = 1:size(put_prices, 1)
    if p >= put_prices(i, 2) && p <= put_prices(i, 3)
        % Calculate residuals
        residual_low = abs(p - round(put_prices(i, 2),3));
        residual_up = abs(p - round(put_prices(i, 3),3));
        % Calculate minimum residual among the two endpoints
        min_res = min(residual_low, residual_up);
       
        % Update minimum residual and interval index
        if min_res < min_residual
            min_residual = min_res;
            interval_idx = i;
        end
        disp(interval_idx)
        
    end
end

if isempty(interval_idx)
    error('No interval found containing the given call price.');
end


% Step 2: Choose the endpoint with the smallest residual difference
interval = put_prices(interval_idx, 2:3);
if abs(p - interval(1)) < abs(p - interval(2))
    nu = interval(1);
else
    nu = interval(2);
end

tolerance = 1e-4;
low=0;
up=1;

% Step 3: Assign alpha value corresponding to chosen interval
alpha = put_prices(interval_idx, 1);

while (up-low)/2 > tolerance
    if nu > p
        up = alpha;
    else
        low = alpha;
    end
    alpha = (low + up) / 2;
    disp(alpha)
    
    % Update nu based on the new alpha value
    alpha_index = find(round(put_prices(:, 1), 2) == round(alpha, 2), 1);
    nu = put_prices(alpha_index, 2);

end
